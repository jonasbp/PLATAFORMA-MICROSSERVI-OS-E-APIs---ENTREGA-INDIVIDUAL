{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PLATAFORMA MICROSSERVI\u00c7OS E APIs - ENTREGA INDIVIDUAL","text":"<p>JONAS BONF\u00c1 PELEGRINA 2025.1</p> <p>PROJETO EM GRUPO REALIZADO COM A GIULIA GOMES VALENTE https://giuvallente.github.io/docs-team/team/main/</p> <p>EXCHANGE</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_exchange</p> <p>ACCOUNT</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_account</p> <p>AUTH</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_auth</p> <p>ORDER</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_order</p> <p>PRODUCT</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_product</p> <p>PRODUCT SERVICE</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_product-service</p> <p>ORDER SERVICE</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_order-service</p> <p>AUTH SERVICE</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_auth-service</p> <p>ACCOUNT SERVICE</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_account-service</p> <p>GATEWAY SERVICE</p> <p>https://github.com/jonasbp/plataformas_microservicoes_apis_individual_gateway-service</p>"},{"location":"#bottlenecks","title":"BOTTLENECKS","text":""},{"location":"#observabilidade-no-eks-com-aws-cloudwatch","title":"Observabilidade no EKS com AWS CloudWatch","text":"<p>Para garantir a observabilidade e o monitoramento da nossa aplica\u00e7\u00e3o executada no Amazon EKS, utilizamos o servi\u00e7o AWS CloudWatch, que \u00e9 a ferramenta nativa da AWS para coleta de m\u00e9tricas, logs e eventos.</p> <p>Realizamos toda a configura\u00e7\u00e3o de integra\u00e7\u00e3o entre o EKS e o CloudWatch, o que nos permitiu:     \u2022   Monitorar o desempenho dos pods e containers em tempo real;     \u2022   Visualizar m\u00e9tricas como uso de CPU, mem\u00f3ria e status dos servi\u00e7os;     \u2022   Configurar alertas autom\u00e1ticos para falhas ou comportamentos fora do esperado;     \u2022   Analisar logs centralizados para facilitar a identifica\u00e7\u00e3o e resolu\u00e7\u00e3o de problemas.</p> <p>Com isso, conseguimos ter visibilidade completa do ambiente e maior seguran\u00e7a na opera\u00e7\u00e3o da nossa aplica\u00e7\u00e3o em produ\u00e7\u00e3o.</p> <p>FOTOFOTO</p>"},{"location":"#uso-de-load-balancer-com-eks-na-aws","title":"Uso de Load Balancer com EKS na AWS","text":"<p>Em nossa arquitetura com Amazon EKS, utilizamos um Load Balancer (balanceador de carga) para distribuir o tr\u00e1fego de forma eficiente entre os pods da aplica\u00e7\u00e3o. Essa configura\u00e7\u00e3o foi essencial para garantir alta disponibilidade, resili\u00eancia e escalabilidade no acesso ao sistema.</p> <p>A integra\u00e7\u00e3o foi feita da seguinte forma:     \u2022   Criamos um Load Balancer externo (ELB ou ALB) automaticamente por meio de um Ingress Controller (como o AWS Load Balancer Controller).     \u2022   Configuramos as rotas e servi\u00e7os no Kubernetes para direcionar o tr\u00e1fego corretamente.     \u2022   Com isso, o Load Balancer distribui as requisi\u00e7\u00f5es entre os pods ativos, garantindo que nenhum n\u00f3 fique sobrecarregado.     \u2022   Tamb\u00e9m foi poss\u00edvel configurar SSL/TLS, regras de roteamento e verifica\u00e7\u00f5es de sa\u00fade (health checks) para manter a aplica\u00e7\u00e3o segura e est\u00e1vel.</p> <p>Essa abordagem nos permitiu escalar horizontalmente com facilidade e oferecer uma experi\u00eancia de acesso confi\u00e1vel para os usu\u00e1rios finais.</p>"},{"location":"#analise-de-vulnerabilidades-com-sonarqube","title":"An\u00e1lise de Vulnerabilidades com SonarQube","text":"<p>Para refor\u00e7ar a seguran\u00e7a e a qualidade do nosso c\u00f3digo, integrarmos nosso reposit\u00f3rio ao SonarQube, uma ferramenta amplamente utilizada para an\u00e1lise est\u00e1tica de c\u00f3digo. Com isso, conseguimos realizar vulnerability scanning e identificar problemas de seguran\u00e7a, bugs e m\u00e1s pr\u00e1ticas logo nas primeiras etapas do desenvolvimento.</p> <p>Os principais benef\u00edcios dessa integra\u00e7\u00e3o foram:     \u2022   Detec\u00e7\u00e3o autom\u00e1tica de vulnerabilidades e c\u00f3digos inseguros;     \u2022   An\u00e1lise cont\u00ednua a cada push no reposit\u00f3rio, integrando com nosso fluxo de CI/CD;     \u2022   Relat\u00f3rios claros e detalhados, com sugest\u00f5es de corre\u00e7\u00e3o;     \u2022   Monitoramento de cobertura de testes, duplica\u00e7\u00f5es, complexidade e padr\u00f5es de c\u00f3digo.</p> <p>Essa pr\u00e1tica garantiu maior confiabilidade e seguran\u00e7a ao nosso software, al\u00e9m de facilitar a manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do sistema ao longo do tempo.</p>"}]}